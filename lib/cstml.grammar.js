/* @macrome
 * @generatedby @bablr/macrome-generator-bablr
 * @generatedfrom ./cstml.grammar.macro.js#0e9820643a50afc4f9566750d5a2f9f5ab0e8ffd
 * This file is autogenerated. Please do not edit it directly.
 * When editing run `npx macrome watch` then change the file this is generated from.
 */
import { interpolateArray as _interpolateArray, interpolateArrayChildren as _interpolateArrayChildren, interpolateString as _interpolateString } from "@bablr/agast-helpers/template";
import * as _l from "@bablr/agast-vm-helpers/languages";
import * as _t from "@bablr/agast-helpers/shorthand";
import * as CSTML from '@bablr/language-en-cstml';
import * as Instruction from './grammar.js';
export const canonicalURL = 'https://bablr.org/languages/core/en/bablr-vm-cstml-instruction';
export const dependencies = {
  ...Instruction.dependencies,
  CSTML
};
export const grammar = class BABLRVMSpamexInstructionGrammar extends Instruction.grammar {
  *Expression() {
    if (yield _t.node(_l.Instruction, "Call", [_t.ref`verb`, _t.ref`arguments`], {
      verb: _t.s_node(_l.Instruction, "Identifier", "eatMatch"),
      arguments: _t.node(_l.Instruction, "Tuple", [_t.ref`openToken`, _t.ref`values[]`, _t.arr(), _t.ref`values[]`, _t.ref`closeToken`], {
        openToken: _t.s_i_node(_l.Instruction, "Punctuator", "("),
        values: [_t.node(_l.Spamex, "NodeMatcher", [_t.ref`open`], {
          open: _t.node(_l.Spamex, "OpenNodeMatcher", [_t.ref`openToken`, _t.ref`flags`, _t.ref`language`, _t.ref`namespaceSeparatorToken`, _t.ref`type`, _t.embedded(_t.node(_l.Spamex, "Space", [_t.lit(" ")], {}, {})), _t.ref`selfClosingTagToken`, _t.ref`closeToken`], {
            openToken: _t.s_i_node(_l.Spamex, "Punctuator", "<"),
            flags: _t.node(_l.CSTML, "Flags", [], {}, {}),
            language: _t.s_node(_l.Spamex, "Identifier", "CSTML"),
            namespaceSeparatorToken: _t.s_i_node(_l.Spamex, "Punctuator", ":"),
            type: _t.s_node(_l.Spamex, "Identifier", "Tag"),
            selfClosingTagToken: _t.s_i_node(_l.Spamex, "Punctuator", "/"),
            closeToken: _t.s_i_node(_l.Spamex, "Punctuator", ">")
          }, {})
        }, {})],
        closeToken: _t.s_i_node(_l.Instruction, "Punctuator", ")")
      }, {})
    }, {})) {
      // done
    } else {
      yield* super.Expression();
    }
  }
};