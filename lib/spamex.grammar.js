/* @macrome
 * @generatedby @bablr/macrome-generator-bablr
 * @generatedfrom ./spamex.grammar.macro.js#2f8f78a22e31cda497624a40e673c0a76d0c3f92
 * This file is autogenerated. Please do not edit it directly.
 * When editing run `npx macrome watch` then change the file this is generated from.
 */
import { interpolateString as _interpolateString } from "@bablr/agast-helpers/template";
import { interpolateArrayChildren as _interpolateArrayChildren } from "@bablr/agast-helpers/template";
import { interpolateArray as _interpolateArray } from "@bablr/agast-helpers/template";
import * as _l from "@bablr/agast-vm-helpers/languages";
import * as _t from "@bablr/agast-helpers/shorthand";
import * as Spamex from '@bablr/language-spamex';
import * as Instruction from './grammar.js';
export const canonicalURL = 'https://bablr.org/languages/core/bablr-vm-spamex-instruction';
export const dependencies = {
  ...Instruction.dependencies,
  Spamex
};
export const grammar = class BABLRVMSpamexInstructionGrammar extends Instruction.grammar {
  *Expression() {
    if (yield _t.node(_l.Instruction, "Call", [_t.ref`verb`, _t.ref`arguments`], {
      verb: _t.s_node(_l.Instruction, "Identifier", "eatMatch"),
      arguments: _t.node(_l.Instruction, "Tuple", [_t.ref`openToken`, _t.ref`values[]`, _t.ref`closeToken`], {
        openToken: _t.s_i_node(_l.Instruction, "Punctuator", "("),
        values: [_t.node(_l.Spamex, "NodeMatcher", [_t.ref`openToken`, _t.ref`flags`, _t.ref`language`, _t.ref`namespaceSeparatorToken`, _t.ref`type`, _t.embedded(_t.s_t_node(_l.Space, "Space", [_t.lit(" ")], {}, {})), _t.ref`intrinsicValue`, _t.ref`closeToken`], {
          openToken: _t.s_i_node(_l.Spamex, "Punctuator", "<"),
          flags: _t.node(_l.CSTML, "Flags", [], {}, {}),
          language: _t.s_node(_l.Spamex, "Identifier", "Spamex"),
          namespaceSeparatorToken: _t.s_i_node(_l.Spamex, "Punctuator", ":"),
          type: _t.s_node(_l.Spamex, "Identifier", "Matcher"),
          intrinsicValue: _t.node(_l.Regex, "Pattern", [_t.ref`openToken`, _t.ref`alternatives[]`, _t.ref`closeToken`], {
            openToken: _t.s_i_node(_l.Regex, "Punctuator", "/"),
            alternatives: [_t.node(_l.Regex, "Alternative", [_t.ref`elements[]`], {
              elements: [_t.node(_l.Regex, "CharacterClass", [_t.ref`openToken`, _t.ref`elements[]`, _t.ref`elements[]`, _t.ref`elements[]`, _t.ref`elements[]`, _t.ref`closeToken`], {
                openToken: _t.s_i_node(_l.Regex, "Punctuator", "["),
                elements: [_t.node(_l.Regex, "Character", [_t.lit("<")], {}, {}), _t.node(_l.Regex, "Character", [_t.lit("'")], {}, {}), _t.node(_l.Regex, "Character", [_t.lit("\"")], {}, {}), _t.node(_l.Regex, "Character", [_t.lit("/")], {}, {})],
                closeToken: _t.s_i_node(_l.Regex, "Punctuator", "]")
              }, {
                negate: false
              })]
            }, {})],
            closeToken: _t.s_i_node(_l.Regex, "Punctuator", "/")
          }, {}),
          closeToken: _t.s_i_node(_l.Spamex, "Punctuator", ">")
        }, {})],
        closeToken: _t.s_i_node(_l.Instruction, "Punctuator", ")")
      }, {})
    }, {})) {
      // done
    } else {
      yield* super.Expression();
    }
  }
};